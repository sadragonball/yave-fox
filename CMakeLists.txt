cmake_minimum_required(VERSION 3.24)
project(yave)

function(build_luajit LUAJIT_TARGET)
    set(LUA_DIR ${CMAKE_SOURCE_DIR}/external/LuaJIT)
    set(LUA_SOURCE_DIR ${LUA_DIR}/src)

    if (WIN32)
        set(LUA_SHARED_OBJECT ${LUA_SOURCE_DIR}/lua51.dll)
    else ()
        set(LUA_SHARED_OBJECT ${LUA_SOURCE_DIR}/lua51.so)
    endif ()

    if (MSVC)
        set(LUA_LIB_FILE ${LUA_SOURCE_DIR}/lua51.lib)
        add_custom_command(OUTPUT ${LUA_LIB_FILE} COMMAND cmd /c ${LUA_SOURCE_DIR}/msvcbuild.bat WORKING_DIRECTORY ${LUA_SOURCE_DIR})
    else ()
        set(LUA_LIB_FILE ${LUA_SHARED_OBJECT})
        set(MAKE_CMD make)
        if (MINGW)
            set(MAKE_CMD mingw32-make)
        endif ()
        add_custom_command(OUTPUT ${LUA_LIB_FILE} COMMAND ${MAKE_CMD} WORKING_DIRECTORY ${LUA_DIR})
    endif ()

    add_custom_target(copy-luajit DEPENDS ${LUA_LIB_FILE})
    add_custom_command(TARGET copy-luajit POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${LUA_SHARED_OBJECT} ${CMAKE_CURRENT_BINARY_DIR})

    add_library(${LUAJIT_TARGET} STATIC IMPORTED GLOBAL)
    add_dependencies(${LUAJIT_TARGET} copy-luajit)
    set_target_properties(${LUAJIT_TARGET} PROPERTIES IMPORTED_LOCATION ${LUA_LIB_FILE})
endfunction(build_luajit)

function(enable_unity_build UB_SUFFIX SOURCE_VARIABLE_NAME)
    message("Using unity build for target ${UB_SUFFIX}")
    set(FILES ${${SOURCE_VARIABLE_NAME}})

    # Exclude all translation units from compilation
    set_source_files_properties(${FILES} PROPERTIES HEADER_FILE_ONLY true)

    # Generate a unique filename for the unity build translation unit
    set(UNIT_BUILD_FILE ${CMAKE_CURRENT_BINARY_DIR}/blob_${UB_SUFFIX}.cpp)
    file(WRITE ${UNIT_BUILD_FILE} "// Unity Build generated by CMake\n")

    # Add include statement for each translation unit
    foreach (SOURCE_FILE ${FILES})
        get_filename_component(FILE_EXT "${SOURCE_FILE}" EXT)
        if (NOT "${FILE_EXT}" MATCHES "\\.h(pp)?")
            file(APPEND ${UNIT_BUILD_FILE} "#include <${SOURCE_FILE}>\n")
        endif ()
    endforeach (SOURCE_FILE)

    # Complement list of translation units with the name of ub
    set(${SOURCE_VARIABLE_NAME} ${${SOURCE_VARIABLE_NAME}} ${UNIT_BUILD_FILE} PARENT_SCOPE)
endfunction(enable_unity_build)

function(optimize_shaders SHADER_TARGET)
    file(GLOB SHADER_BINARIES "${CMAKE_CURRENT_BINARY_DIR}/*.spv")
    foreach (SHADER ${SHADER_BINARIES})
        add_custom_command(TARGET ${SHADER_TARGET} POST_BUILD COMMAND spirv-opt ${SHADER} -O --preserve-bindings -o ${SHADER})
    endforeach ()
endfunction(optimize_shaders)


option(YAVE_BUILD_YAVE "Build yave" ON)
option(YAVE_BUILD_EDITOR "Build editor" ON)
option(YAVE_TRACY_PROFILING "Use Tracy profiling" ON)
option(YAVE_UNITY_BUILD "Force unity build" OFF)


set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_CXX_STANDARD 17)


# See note in y
# set(CMAKE_CXX_EXTENSIONS OFF)


find_package(Vulkan REQUIRED)

if (NOT Vulkan_FOUND)
    message(FATAL_ERROR "Vulkan SDK not found")
endif ()
if (NOT Vulkan_glslc_FOUND)
    message(FATAL_ERROR "glslc not found in Vulkan SDK")
endif ()


# add y subtree
add_subdirectory(y)

add_subdirectory(external/spirv_cross)

# setup includes
include_directories(${y_SOURCE_DIR})
include_directories(${yave_SOURCE_DIR})
include_directories(${Vulkan_INCLUDE_DIRS})
include_directories(external/sol/include)
include_directories(external/LuaJIT/src)


# Yave's core file
file(GLOB_RECURSE YAVE_FILES
        "yave/*.h"
        "yave/*.cpp"
        )

set(TRACY_FILES
        # "external/tracy/public/TracyClient.cpp"
        # "external/tracy/public/tracy/Tracy.hpp"
        "external/tracy/TracyClient.cpp"
        "external/tracy/Tracy.hpp"
        )

# Editor files
file(GLOB_RECURSE EDITOR_FILES
        "editor/*.cpp"
        "editor/*.h"
        )

file(GLOB_RECURSE EDITOR_EXTERNAL_FILES
        "external/imgui/*.cpp"
        "external/imgui/*.h"

        "external/imgui_test_engine/*.cpp"
        "external/imgui_test_engine/*.h"

        "external/tinygltf/*.hpp"
        "external/tinygltf/*.h"
        )

# Shader files
file(GLOB_RECURSE SHADER_FILES
        "shaders/*.frag"
        "shaders/*.vert"
        "shaders/*.geom"
        "shaders/*.comp"
        )

# Shader libs, they are here so the IDE can find them
file(GLOB_RECURSE SHADER_LIBS
        "shaders/*.glsl"
        )


build_luajit(luajit)

if (YAVE_UNITY_BUILD)
    enable_unity_build(yave YAVE_FILES)
endif ()

if (YAVE_BUILD_YAVE)
    add_library(yave STATIC ${YAVE_FILES} ${SHADER_FILES} ${SHADER_LIBS})

    if (UNIX)
        target_link_libraries(yave xcb)
    endif ()

    if (YAVE_TRACY_PROFILING)
        add_library(tracy STATIC ${TRACY_FILES})
        if (WIN32)
            target_link_libraries(tracy ws2_32 dbghelp advapi32 user32)
        endif ()
        target_compile_options(tracy PUBLIC "-DTRACY_ENABLE")
        target_link_libraries(yave tracy)
    endif ()

    target_link_libraries(yave ${Vulkan_LIBRARY})
    target_link_libraries(yave y spirv-cross-core)

    if (NOT MSVC)
        target_link_libraries(yave stdc++fs)
    endif ()

    target_link_libraries(yave luajit)

    add_custom_target(shaders COMMAND ${Vulkan_GLSLC_EXECUTABLE} -c --target-env=vulkan1.2 ${SHADER_FILES})
    optimize_shaders(shaders)

    add_dependencies(yave shaders)
endif ()

if (YAVE_BUILD_EDITOR)
    add_executable(editor ${EDITOR_FILES} ${EDITOR_EXTERNAL_FILES})
    target_include_directories(editor PRIVATE external/imgui)

    target_link_libraries(editor yave)
endif ()

